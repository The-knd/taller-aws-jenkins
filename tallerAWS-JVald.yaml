AWSTemplateFormatVersion: '2010-09-09'
Description: Plantilla para crear una VPC, subredes, instancias EC2 y RDS en AWS

Resources:
  #VPC
  MyVPCGTNJVald:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPCGTNJVald

  #Subredes Públicas y Privadas
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  #Internet Gateway: Se usa para brindar acceso a internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  #Se le añade el internet Gateway a la VPC.
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      InternetGatewayId: !Ref InternetGateway

  #NAT Gateway: Se usa pra darle internet a la private subnet por NAT
  #Primero se le da direcciones publicas al NAT
  ElastcIPForNAT:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  #Se crea la NAT
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt ElastcIPForNAT.AllocationId

  #Tablas de Rutas
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    #DependsOn: AttachGateway
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    #DependsOn: PrivateRoute
    Properties:
      VpcId: !Ref MyVPCGTNJVald
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  #Rutas
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  #Asociar subredes a tablas de rutas
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #Grupos de Seguridad
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS, and SSH
      VpcId: !Ref MyVPCGTNJVald
      #Reglas de entrada/acceso
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      #Regla de salida
      SecurityGroupEgress:
        #Permite todos los protocolos (-1)
        - IpProtocol: -1
          #Paracualquier direccion ip 
          CidrIp: 0.0.0.0/0

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and 8080
      VpcId: !Ref MyVPCGTNJVald
      #Reglas de entrada/acceso
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      #Regla de salida
      SecurityGroupEgress:
        #Permite todos los protocolos (-1)
        - IpProtocol: -1
          #Paracualquier direccion ip 
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from application
      VpcId: !Ref MyVPCGTNJVald
      #Reglas de entrada/acceso
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          #Solo desde el grupo de seguridad especificado
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      #Regla de salida
      SecurityGroupEgress:
        #Permite todos los protocolos (-1)
        - IpProtocol: -1
          #Paracualquier direccion ip 
          CidrIp: 0.0.0.0/0

  #Instancias EC2
  #Instancia en la AZ 0
  ApplicationEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00402f0bdf4996822 
      InstanceType: t2.micro
      KeyName: lab-class
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
          - Key: Name
            Value: App-JVald

      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install -y mariadb-server
            sudo apt install git fontconfig openjdk-17-jre -y
            
            sudo apt-get install ca-certificates curl gnupg -y

            sudo install -m 0755 -d /etc/apt/keyrings

            #Descargamos las llaves de instalacion
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            #Damos permisos a las llaves
            sudo chmod a+r /etc/apt/keyrings/docker.gpg

            #Agregamos el repositorio de docker
            sudo echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            #Actualizamos paquetes
            sudo apt-get update

            #Instalamos Docker y Docker-CLI
            sudo apt-get install docker compose docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

            #Instalamos apache2
            sudo apt-get install apache2 -y
            sudo systemctl enable apache2

  #Instancia en la AZ 1
  JenkinsEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00402f0bdf4996822 
      InstanceType: t2.micro
      KeyName: lab-class
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
      SubnetId: !Ref PublicSubnet2
      Tags:
          - Key: Name
            Value: Jenkins-JVald


      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt install git fontconfig openjdk-17-jre -y
            java -version
            sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
            https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
            echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
            https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
            /etc/apt/sources.list.d/jenkins.list > /dev/null
            sudo apt-get update
            sudo apt-get install jenkins -y
            sudo systemctl enable jenkins
            sudo systemctl start jenkins

  #Base de Datos RDS
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: admin
      MasterUserPassword: adminpass
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  #Subnet Group para RDS
  #Permite la comunicacion con la rds
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
